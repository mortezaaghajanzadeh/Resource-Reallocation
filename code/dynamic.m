%%
clear
clc

variables = struct( ...
    'mu', 0, ...
    'theta', 1, ...
    'eta', inf, ...
    'r_b', 0.05, ...
    'green_premium', 0, ...
    'w', 0.500, ... % MSEK
    'tau_E', 0, ... % per ton
    'n', 1000 ...
);

parameters = struct(...
    'alpha', 0.25, ...
    'beta', 0.6, ...
    'sigma',5, ...
    'gamma', 2.7268, ...
    'A_hat', 2, ...
    'sd_hat', 0.45, ...
    'A_tilde', .0002, ...
    'sd_tilde', 2, ...
    'rho', 0.9 ...
);
clc
tax_profile = [0,100,200,500];
obj = functionsContainer();
parameters = obj.generate_parameters(variables,parameters);

target_moments = [0.25; 0.6;0.4;2;250;908;0.0072;0.0184;0.5];
x0 = [0.25,0.6,5,2.7268,2,0.45,0.0002,2,0.5];
r = @(b) funciton_test(obj,variables,tax_profile,b(1),b(2),b(3),b(4),b(5),b(6),b(7),b(8),b(9),target_moments);
options = optimoptions('fsolve','Display','iter','MaxFunctionEvaluations',10000,'MaxIterations',1000);
S = fsolve(r,x0,options);

%%
[emissions, production, intensity, G_c, B_c, labor, income, cost_share, price, z_k, z_l, K,R] = simulate_dynamic_firms(obj,variables,parameters_funciton(S),tax_profile);
(funciton_test(obj,variables,tax_profile,S(1),S(2),S(3),S(4),S(5),S(6),S(7),S(8),S(9),target_moments) + 1 ) .* target_moments
%%

function H = funciton_test(obj,variables,tax_profile,b1,b2,b3,b4,b5,b6,b7,b8,b9,target_moments)
    b = [b1,b2,b3,b4,b5,b6,b7,b8,b9];

    parameters = struct(...
    'alpha', b(1), ...
    'beta', b(2), ...
    'sigma',b(3), ...
    'gamma', b(4), ...
    'A_hat', b(5), ...
    'sd_hat', b(6), ...
    'A_tilde', b(7), ...
    'sd_tilde', b(8), ...
    'rho', b(9) ...
);
    [emissions, production, intensity, G_c, B_c, labor, income, cost_share, price, z_k, z_l, K,R] = simulate_dynamic_firms(obj,variables,parameters,tax_profile);
    
    numTaxes = length(tax_profile);


    moments = zeros(numTaxes,1);
    moments(1) = mean(sum(G_c,1) ./ sum(B_c,1));
    moments(2) = mean(sum(variables.w .* labor,1) ./ sum(R .* K,1));
    moments(3) = mean(sum(variables.w .* labor,1) ./ sum(income,1));
    moments(4) = obj.regression_res(cost_share,intensity);
    moments(5) = mean(mean(labor));
    moments(6) = mean(std(labor));
    moments(7) = mean(mean(intensity));
    moments(8) = mean(std(intensity));
    moments(9) = feval(@(x) x(1, 2), corrcoef(income, intensity));

    H = moments ./ target_moments - 1;
end
function parameters = parameters_funciton(b)
    parameters = struct(...
        'alpha', b(1), ...
        'beta', b(2), ...
        'sigma',b(3), ...
        'gamma', b(4), ...
        'A_hat', b(5), ...
        'sd_hat', b(6), ...
        'A_tilde', b(7), ...
        'sd_tilde', b(8), ...
        'rho', b(9) ...
    );
end
